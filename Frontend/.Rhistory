knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
installed.packages(ggplot2)
# Given data
rcbd <- data.frame(
Plot = factor(c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)),
Insecticide = factor(rep(LETTERS[1:3], 4)),
Plants = c(61, 87, 85, 48, 78, 72, 66, 94, 83, 62, 93, 85)
)
# Fit the RCBD model (including Plot as a blocking factor)
rcbd_model <- aov(Plants ~ Insecticide + Plot, data = rcbd)
summary(rcbd_model)
# Fit the CRD model (excluding Plot as a blocking factor)
crd_model <- aov(Plants ~ Insecticide, data = rcbd)
summary(crd_model)
# Extract residual sum of squares for both RCBD and CRD models
ss_res_rcbd <- sum(rcbd_model$residuals^2)  # Residual Sum of Squares for RCBD
ss_res_crd <- sum(crd_model$residuals^2)    # Residual Sum of Squares for CRD
# Calculate the relative efficiency (RE) of RCBD compared to CRD
relative_efficiency <- ss_res_crd / ss_res_rcbd
print(paste("Relative Efficiency:", round(relative_efficiency, 2)))
# Load necessary libraries
library(pwr)
# Install necessary package if not already installed
if (!requireNamespace("MASS", quietly = TRUE)) {
install.packages("MASS")
}
# Load necessary libraries
library(pwr)
# Given parameters
t <- 5  # number of treatments
D <- 10  # difference in means
sigma2 <- 64  # variance of observed variable
alpha <- 0.05
replicates_range <- 5:20  # number of replicates per treatment, ranging from 5 to 20
# Calculate non-centrality parameter and power for each number of replicates
power_values <- sapply(replicates_range, function(r) {
lambda <- (r * D^2) / (2 * sigma2)
f_critical <- qf(1 - alpha, df1 = t - 1, df2 = t * r - t)
1 - pf(f_critical, df1 = t - 1, df2 = t * r - t, ncp = lambda)
})
# Plot power vs replica number
plot(replicates_range, power_values, type = "b", pch = 19, xlab = "Number of Replicates per Treatment (r)",
ylab = "Power", main = "Power vs Number of Replicates per Treatment")
abline(h = 0.8, col = "red", lty = 2)
# Find the minimum number of replicates to achieve at least 80% power
replicates_needed <- min(replicates_range[power_values >= 0.8])
cat("Number of replicates needed for 80% power:", replicates_needed, "\n")
# Plot power vs size of difference with 50 total observations
# Given parameters for this scenario
total_observations <- 50
replicates_per_treatment <- total_observations %/% t
difference_range <- seq(5, 30, by = 0.1)  # difference in means, varying from 5 to 30 in increments of 0.1
# Calculate power for each difference size
power_values_diff <- sapply(difference_range, function(D) {
lambda <- (replicates_per_treatment * D^2) / (2 * sigma2)
f_critical <- qf(1 - alpha, df1 = t - 1, df2 = total_observations - t)
1 - pf(f_critical, df1 = t - 1, df2 = total_observations - t, ncp = lambda)
})
# Plot power vs size of difference
plot(difference_range, power_values_diff, type = "b", pch = 19, xlab = "Size of Difference (D)",
ylab = "Power", main = "Power vs Size of Difference")
abline(h = 0.9, col = "red", lty = 2)
# Find the minimum difference needed to achieve at least 90% power
min_difference_needed <- min(difference_range[power_values_diff >= 0.9])
cat("Minimum difference needed for 90% power:", min_difference_needed, "\n")
rcbd <- tibble(Plot = factor(c(1,1,1,2,2,2,3,3,3,4,4,4)),
Insecticide = factor(c(LETTERS[1:3],LETTERS[1:3],LETTERS[1:3],LETTERS[1:3])),
Plants = c(61, 87, 85, 48, 78, 72, 66, 94, 83, 62, 93, 85))
confidence_level <- 0.90
variance <- 10
margin_of_error <- 1
# Calculate the critical z-value for the given confidence level
z_critical <- qnorm(1 - (1 - confidence_level) / 2)
# Calculate the required number of observations (n) to achieve the desired margin of error
n <- (z_critical^2 * variance) / (margin_of_error^2)
n_rounded <- ceiling(n)  # Round up to the next whole number since n must be an integer
cat("Number of observations needed:", n_rounded, "\n")
# Given data
rcbd <- data.frame(
Plot = factor(c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)),
Insecticide = factor(rep(LETTERS[1:3], 4)),
Plants = c(61, 87, 85, 48, 78, 72, 66, 94, 83, 62, 93, 85)
)
# Fit the RCBD model (including Plot as a blocking factor)
rcbd_model <- aov(Plants ~ Insecticide + Plot, data = rcbd)
summary(rcbd_model)
# Fit the CRD model (excluding Plot as a blocking factor)
crd_model <- aov(Plants ~ Insecticide, data = rcbd)
summary(crd_model)
# Extract residual sum of squares for both RCBD and CRD models
ss_res_rcbd <- sum(rcbd_model$residuals^2)  # Residual Sum of Squares for RCBD
ss_res_crd <- sum(crd_model$residuals^2)    # Residual Sum of Squares for CRD
# Calculate the relative efficiency (RE) of RCBD compared to CRD
relative_efficiency <- ss_res_crd / ss_res_rcbd
print(paste("Relative Efficiency:", round(relative_efficiency, 2)))
# Given data
rcbd <- data.frame(
Plot = factor(c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)),
Insecticide = factor(rep(LETTERS[1:3], 4)),
Plants = c(61, 87, 85, 48, 78, 72, 66, 94, 83, 62, 93, 85)
)
# Fit the RCBD model (including Plot as a blocking factor)
rcbd_model <- aov(Plants ~ Insecticide + Plot, data = rcbd)
summary(rcbd_model)
# Fit the CRD model (excluding Plot as a blocking factor)
crd_model <- aov(Plants ~ Insecticide, data = rcbd)
summary(crd_model)
# Extract residual sum of squares for both RCBD and CRD models
ss_res_rcbd <- sum(rcbd_model$residuals^2)  # Residual Sum of Squares for RCBD
ss_res_crd <- sum(crd_model$residuals^2)    # Residual Sum of Squares for CRD
# Calculate the relative efficiency (RE) of RCBD compared to CRD
relative_efficiency <- ss_res_crd / ss_res_rcbd
print(paste("Relative Efficiency:", round(relative_efficiency, 2)))
# Given parameters
t <- 5  # number of treatments
D <- 10  # difference in means
sigma2 <- 64  # variance of observed variable
alpha <- 0.05
replicates_range <- 5:20  # number of replicates per treatment, ranging from 5 to 20
# Calculate non-centrality parameter and power for each number of replicates
power_values <- sapply(replicates_range, function(r) {
lambda <- (r * D^2) / (2 * sigma2)
f_critical <- qf(1 - alpha, df1 = t - 1, df2 = t * r - t)
1 - pf(f_critical, df1 = t - 1, df2 = t * r - t, ncp = lambda)
})
# Plot power vs replica number
plot(replicates_range, power_values, type = "b", pch = 19, xlab = "Number of Replicates per Treatment (r)",
ylab = "Power", main = "Power vs Number of Replicates per Treatment")
abline(h = 0.8, col = "red", lty = 2)
# Find the minimum number of replicates to achieve at least 80% power
replicates_needed <- min(replicates_range[power_values >= 0.8])
cat("Number of replicates needed for 80% power:", replicates_needed, "\n")
# Plot power vs size of difference with 50 total observations
# Given parameters for this scenario
total_observations <- 50
replicates_per_treatment <- total_observations %/% t
difference_range <- seq(5, 30, by = 0.1)  # difference in means, varying from 5 to 30 in increments of 0.1
# Calculate power for each difference size
power_values_diff <- sapply(difference_range, function(D) {
lambda <- (replicates_per_treatment * D^2) / (2 * sigma2)
f_critical <- qf(1 - alpha, df1 = t - 1, df2 = total_observations - t)
1 - pf(f_critical, df1 = t - 1, df2 = total_observations - t, ncp = lambda)
})
# Plot power vs size of difference
plot(difference_range, power_values_diff, type = "b", pch = 19, xlab = "Size of Difference (D)",
ylab = "Power", main = "Power vs Size of Difference")
abline(h = 0.9, col = "red", lty = 2)
# Find the minimum difference needed to achieve at least 90% power
min_difference_needed <- min(difference_range[power_values_diff >= 0.9])
cat("Minimum difference needed for 90% power:", min_difference_needed, "\n")
tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>% mutate(across(1:3, as.factor)) -> mpgData
# Given data
mpgData <- tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>% mutate(across(1:3, as.factor))
# Given data
mpgData <- tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>% mutate(across(1:3, as.factor))
# Load necessary library
tibble::tribble  # Ensure tibble package is loaded
install.packages("pibble")
# Load necessary library
tibble::tribble  # Ensure tibble package is loaded
install.packages("pibble")
# Load necessary library
library(pibble)
install.packages("fido")
# Load necessary library
library(pibble)
# Load necessary library
library(pibble)
# Load necessary library
library(fido)
# Given data
mpgData <- tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>% mutate(across(1:3, as.factor))
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary library
# Given data
mpgData <- tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>% mutate(across(1:3, as.factor))
install.packages("dplyr")
tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>% mutate(across(1:3, as.factor)) -> mpgData
install.packages("knitr")
tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>% mutate(across(1:3, as.factor)) -> mpgData
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
tibble(x = seq(0,10,length=200)) |> mutate(density = dnorm(x,3,2), hypothesis = "null") -> plotMe
tibble(x = seq(0,10,length=200)) |> mutate(density = dnorm(x,7.5,1), hypothesis = "alternative") |>
bind_rows(plotMe) -> plotMe
ggplot(plotMe, aes(x = x, color = hypothesis)) +
geom_ribbon(aes(ymin = 0, ymax = density, fill = hypothesis), alpha = 0.1) +
theme_bw() + geom_vline(xintercept= 6.25, color = "red", linetype = 2, linewidth = 1) +
annotate("text", label="T*", x=6, y=0.3, color = "red") + xlab("T") + ylab("Density")
install.packages(c("dplyr", "tibble", "lme4"))
library(dplyr)
library(tibble)
library(lme4)
install.packages(c("dplyr", "tibble", "lme4"))
library(dplyr)
library(tibble)
library(lme4)
mpgData <- tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>%
mutate(across(1:3, as.factor))
rcbd_model <- aov(mpg ~ Blend + Driver + Model, data = mpgData)
summary(rcbd_model)
crd_model <- aov(mpg ~ Blend, data = mpgData)
summary(crd_model)
rcbd_residual_ms <- summary(rcbd_model)[[1]]["Residuals", "Mean Sq"]
crd_residual_ms <- summary(crd_model)[[1]]["Residuals", "Mean Sq"]
re <- crd_residual_ms / rcbd_residual_ms
print(paste("Relative Efficiency:", round(re, 2)))
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("dplyr", "tibble", "lme4"))
library(dplyr)
library(tibble)
library(lme4)
mpgData <- tribble(
~Driver, ~Model, ~Blend, ~mpg,
"1", "1", "A", 15.5,
"2", "1", "B", 16.3,
"3", "1", "C", 10.5,
"4", "1", "D", 14.0,
"1", "2", "B", 33.8,
"2", "2", "C", 26.4,
"3", "2", "D", 31.5,
"4", "2", "A", 34.5,
"1", "3", "C", 13.7,
"2", "3", "D", 19.1,
"3", "3", "A", 17.5,
"4", "3", "B", 19.7,
"1", "4", "D", 29.2,
"2", "4", "A", 22.5,
"3", "4", "B", 30.1,
"4", "4", "C", 21.6
) %>%
mutate(across(1:3, as.factor))
rcbd_model <- aov(mpg ~ Blend + Driver + Model, data = mpgData)
summary(rcbd_model)
crd_model <- aov(mpg ~ Blend, data = mpgData)
summary(crd_model)
rcbd_residual_ms <- summary(rcbd_model)[[1]]["Residuals", "Mean Sq"]
crd_residual_ms <- summary(crd_model)[[1]]["Residuals", "Mean Sq"]
re <- crd_residual_ms / rcbd_residual_ms
print(paste("Relative Efficiency:", round(re, 2)))
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex")
